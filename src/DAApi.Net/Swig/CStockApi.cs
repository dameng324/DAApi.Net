//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DAApi.Net {

public class CStockApi : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CStockApi(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CStockApi obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(CStockApi obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~CStockApi() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DaApiWrapperPINVOKE.delete_CStockApi(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static string GetVersion() {
    string ret = DaApiWrapperPINVOKE.CStockApi_GetVersion();
    return ret;
  }

  public static CStockApi CreateStockApi(bool bRecordLog, string lpszLogFileName, string lpszLogFileDir) {
    global::System.IntPtr cPtr = DaApiWrapperPINVOKE.CStockApi_CreateStockApi__SWIG_0(bRecordLog, lpszLogFileName, lpszLogFileDir);
    CStockApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CStockApi(cPtr, false);
    return ret;
  }

  public static CStockApi CreateStockApi(bool bRecordLog, string lpszLogFileName) {
    global::System.IntPtr cPtr = DaApiWrapperPINVOKE.CStockApi_CreateStockApi__SWIG_1(bRecordLog, lpszLogFileName);
    CStockApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CStockApi(cPtr, false);
    return ret;
  }

  public static CStockApi CreateStockApi(bool bRecordLog) {
    global::System.IntPtr cPtr = DaApiWrapperPINVOKE.CStockApi_CreateStockApi__SWIG_2(bRecordLog);
    CStockApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CStockApi(cPtr, false);
    return ret;
  }

  public virtual bool Init() {
    bool ret = DaApiWrapperPINVOKE.CStockApi_Init(swigCPtr);
    return ret;
  }

  public virtual void Release() {
    DaApiWrapperPINVOKE.CStockApi_Release(swigCPtr);
  }

  public virtual void SetHeartBeatTimeout(int iTimeout) {
    DaApiWrapperPINVOKE.CStockApi_SetHeartBeatTimeout(swigCPtr, iTimeout);
  }

  public virtual void RegisterSpi(IStockEvent pIStockEvent) {
    DaApiWrapperPINVOKE.CStockApi_RegisterSpi(swigCPtr, IStockEvent.getCPtr(pIStockEvent));
  }

  public virtual void RegisterNameServer(string pszNsAddress) {
    DaApiWrapperPINVOKE.CStockApi_RegisterNameServer(swigCPtr, pszNsAddress);
  }

  public virtual bool ReqUserLogin(CStockReqUserLoginField pReqUserLogin, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqUserLogin(swigCPtr, CStockReqUserLoginField.getCPtr(pReqUserLogin), iRequestID);
    return ret;
  }

  public virtual bool ReqUserLogout(CStockReqUserLogoutField pReqUserLogout, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqUserLogout(swigCPtr, CStockReqUserLogoutField.getCPtr(pReqUserLogout), iRequestID);
    return ret;
  }

  public virtual bool ReqSafeVerify(CStockReqSafeVerifyField pReqSafeVerify, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqSafeVerify(swigCPtr, CStockReqSafeVerifyField.getCPtr(pReqSafeVerify), iRequestID);
    return ret;
  }

  public virtual bool ReqVerifyCode(CStockReqVerifyCodeField pReqVerifyCode, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqVerifyCode(swigCPtr, CStockReqVerifyCodeField.getCPtr(pReqVerifyCode), iRequestID);
    return ret;
  }

  public virtual bool ReqSetVerifyQA(CStockReqSetVerifyQAField pReqSetVerifyQA, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqSetVerifyQA(swigCPtr, CStockReqSetVerifyQAField.getCPtr(pReqSetVerifyQA), iRequestID);
    return ret;
  }

  public virtual bool ReqGetQuestion(CStockReqGetQuestionField pReqGetQuestion, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqGetQuestion(swigCPtr, CStockReqGetQuestionField.getCPtr(pReqGetQuestion), iRequestID);
    return ret;
  }

  public virtual bool ReqOrderInsert(CStockReqOrderInsertField pReqOrderInsert, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqOrderInsert(swigCPtr, CStockReqOrderInsertField.getCPtr(pReqOrderInsert), iRequestID);
    return ret;
  }

  public virtual bool ReqOrderModify(CStockReqOrderModifyField pReqOrderModify, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqOrderModify(swigCPtr, CStockReqOrderModifyField.getCPtr(pReqOrderModify), iRequestID);
    return ret;
  }

  public virtual bool ReqOrderCancel(CStockReqOrderCancelField pReqOrderCancel, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqOrderCancel(swigCPtr, CStockReqOrderCancelField.getCPtr(pReqOrderCancel), iRequestID);
    return ret;
  }

  public virtual bool ReqPasswordUpdate(CStockReqPasswordUpdateField pReqPasswordUpdate, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqPasswordUpdate(swigCPtr, CStockReqPasswordUpdateField.getCPtr(pReqPasswordUpdate), iRequestID);
    return ret;
  }

  public virtual bool ReqQryTick(CStockQryTickField pQryTick, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryTick(swigCPtr, CStockQryTickField.getCPtr(pQryTick), iRequestID);
    return ret;
  }

  public virtual bool ReqQryOrder(CStockQryOrderField pQryOrder, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryOrder(swigCPtr, CStockQryOrderField.getCPtr(pQryOrder), iRequestID);
    return ret;
  }

  public virtual bool ReqQryTrade(CStockQryTradeField pQryTrade, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryTrade(swigCPtr, CStockQryTradeField.getCPtr(pQryTrade), iRequestID);
    return ret;
  }

  public virtual bool ReqQryCapital(CStockQryCapitalField pQryCapital, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryCapital(swigCPtr, CStockQryCapitalField.getCPtr(pQryCapital), iRequestID);
    return ret;
  }

  public virtual bool ReqQryVersion(CStockQryVersionField pQryVersion, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryVersion(swigCPtr, CStockQryVersionField.getCPtr(pQryVersion), iRequestID);
    return ret;
  }

  public virtual bool ReqQryPosition(CStockQryPositionField pQryPosition, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryPosition(swigCPtr, CStockQryPositionField.getCPtr(pQryPosition), iRequestID);
    return ret;
  }

  public virtual bool ReqQryCurrency(CStockQryCurrencyField pQryCurrency, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryCurrency(swigCPtr, CStockQryCurrencyField.getCPtr(pQryCurrency), iRequestID);
    return ret;
  }

  public virtual bool ReqQryExchange(CStockQryExchangeField pQryExchange, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryExchange(swigCPtr, CStockQryExchangeField.getCPtr(pQryExchange), iRequestID);
    return ret;
  }

  public virtual bool ReqQryInstrument(CStockQryInstrumentField pQryInstrument, int iRequestID) {
    bool ret = DaApiWrapperPINVOKE.CStockApi_ReqQryInstrument(swigCPtr, CStockQryInstrumentField.getCPtr(pQryInstrument), iRequestID);
    return ret;
  }

}

}
